{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Delete": {
		"scope": "php",
		"prefix": "adt-delete",
		"body": [
			"public function delete(\\$id = NULL)",
			"{",
			"	\\$id = isset(\\$id) ? \\$id : \\$this->id;",
			"	parent::delete(\\$id);",
			"}"
		],
		"description": "Abre uma conexão no adianti com try e catch"
	},
	"Transação": {
		"scope": "php",
		"prefix": "adt-transacao,try",
		"body": [
			"try{",
			"TTransaction::open('sample');",
			"$1",
			"TTransaction::close();",
			"}catch(Exception \\$e){",
			"new TMessage('error',\\$e->getMessage());",
			"}"
		],
		"description": "Abre uma conexão no adianti com try e catch"
	},
	"onDelete":{
		"scope":"php",
		"prefix": "adt-onDelete,deletar",
		"body": [
			"public function onDelete(\\$param = null) ",
    		"{ ",
			"if(isset(\\$param['delete']) && \\$param['delete'] == 1)",
			"{",
            "		try",
            "		{",
            "   	 \\$key = \\$param['key'];",
            "   	 TTransaction::open(self::\\$database);",
            "   	 \\$object = new ${1:Model}(\\$key, FALSE); ",
            "   	 \\$object->delete();",
            "   	 TTransaction::close();",
            "   	 \\$this->onReload( \\$param );",
            "   	 new TMessage('info', AdiantiCoreTranslator::translate('Record deleted'));",
            "		}",
            "		catch (Exception \\$e) ",
            "		{",
            "   	new TMessage('error', \\$e->getMessage());",
            "    	TTransaction::rollback();",
            "		}",
			"	}",
			"	else",
			"	{",
			"		\\$action = new TAction(array(\\$this, 'onDelete'));",
			"		\\$action->setParameters(\\$param);",
			"		\\$action->setParameter('delete', 1);",
			"		new TQuestion(AdiantiCoreTranslator::translate('Do you really want to delete ?'), \\$action);   ",
			"	}",
			"}"
		],
		"description": "Função padrão de onDelete"
	},
	"Model":{
		"scope":"php",
		"prefix": "adt-model completa",
		"body": [			
			"class ${1:Modelo} extends TRecord",
			"{",
			"	const TABLENAME  = '${2:tabela}';",
			"	const PRIMARYKEY = 'id';",
			"	const IDPOLICY   =  'serial';",
			"",
			"	public function __construct(\\$id = NULL, \\$callObjectLoad = TRUE)",
			"	{",
			"		parent::__construct(\\$id, \\$callObjectLoad);",
			"		parent::addAttribute('${4:atributo}');            ",
			"	}				",
			"}"
		],
		"description": "Modelo básico de criação de uma Model"
	},
	"Associação":{
		"scope":"php",
		"prefix": "adt-relacionamento-associacao",
		"body": [			
			"public function get_${1:variavel}()",
			"{",
			"	if (empty(\\$this->${1:variavel}))",
			"		\\$this->${1:variavel} = new ${2:Modelo}(\\$this->${1:variavel}_id);			",
			"	return \\$this->${1:variavel};",
			"}",
		],
		"description": "Get de associação adianti"
	},	
	"Datagrid Rápida":{
		"scope":"php",
		"prefix": "adt-datagrid-criacao",
		"body": [			
			"\\$this->datagrid = new BootstrapDatagridWrapper(new TDataGrid);",
			"",
			"\\$coluna_${1:nomeColuna} = new TDataGridColumn('${1:nomeColuna}',    '${2:Título}',    'center');",
			"$0",
			"\\$this->datagrid->addColumn(\\$coluna_${1:nomeColuna});",
			"\\$this->datagrid->createModel();"
		],
		"description": "Datagrid adianti"
	},
	"Coluna de Datagrid":{
		"scope":"php",
		"prefix": "adt-datagrid-coluna",
		"body": [	
			"\\$coluna_${1:nomeColuna} = new TDataGridColumn('${1:nomeColuna}',    '${2:Título}',    'center');",	
			"",
			"\\$this->datagrid->addColumn(\\$coluna_${1:nomeColuna});",	
		],
		"description": "Coluna de Datagrid adianti"
	},
	"Placeholder Padrão de Datagrid":{
		"scope":"php",
		"prefix": "adt-datagrid-popover",
		"body": [	
			"\\$this->datagrid->enablePopover('<b>${1:Título}</b>', '${2:Descrição}');",
			""
		],
		"description": "Popover de Datagrid adianti"
	},
	"Ação de Datagrid":{
		"scope":"php",
		"prefix": "adt-datagrid-acao",
		"body": [	
		"\\$action_${1:nomeAção} = new TDataGridAction([${2:\\$this}, '${3:Metodo}'] );",
		"\\$action_${1:nomeAção}->setUseButton(TRUE);",
		"\\$action_${1:nomeAção}->setField('id');",
		"\\$this->datagrid->addAction(\\$action_${1:nomeAção}, '${4:NomeBotao}', 'fa:${5:search blue}');",
		"",
		],
		"description": "Popover de Datagrid adianti"
	},
	"Transform de Datagrid":{
		"scope":"php",
		"prefix": "adt-datagrid-transform",
		"body": [	
		"\\$coluna_${1:nomeColuna}->setTransformer(['Transform','${2:Dinheiro}']);",
		"$0",
		],
		"description": "Transformação Padrão Adianti"
	},
	"Validador de Tamanho Maximo":{
		"scope":"php",
		"prefix": "adt-validador-tamanho maximo",
		"body": [	
		"Validador::TamanhoMaximo('${1:Nome do Campo}',${2:Valor de Entrada},${3:Tamanho máximo});",
		"$0",
		],
		"description": "Validador de Tamanho máximo"
	},
	"Validador Obrigatório":{
		"scope":"php",
		"prefix": "adt-validador-required obrigatorio",
		"body": [	
		"Validador::Required('${1:Nome do Campo}',${2:Valor de Entrada});",
		"$0",
		],
		"description": "Validador de Obrigatório"
	},
	"Linha Adianti":{
		"scope":"php",
		"prefix": "adt-layout-linha",
		"body": [	
		"\\$this->linha=TElement::tag('div','',['class'=>'row']);",
		"$0",
		],
		"description": "Linha"
	},
	"Div Adianti":{
		"scope":"php",
		"prefix": "adt-layout-div",
		"body": [	
		"\\$div_${1:Nome da div}=TElement::tag('div','',['class'=>'${2:Classe}']);",
		"$0",
		],
		"description": "Linha"
	},
	"Overload Store Adianti":{
		"scope":"php",
		"prefix": "adt-model-store",
		"body": [	
			"public function store()",
			"{",
			"	parent::store();",
			"}"
		
		],
		"description": "Overload Store Adianti"
	}



}